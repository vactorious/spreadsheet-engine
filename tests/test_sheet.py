from sheets.workbook import Workbook
from sheets.error import CellError, CellErrorType
import unittest


class TestSheetsFunctionality(unittest.TestCase):
    def test_initial_autogenerated_sheet_name(self):
        """Unit test for sheet names autogenerations when not specified."""

        wb = Workbook()

        _, name = wb.new_sheet()
        _, name2 = wb.new_sheet()
        _, name3 = wb.new_sheet()

        self.assertEqual(name, "Sheet1")
        self.assertEqual(name2, "Sheet2")
        self.assertEqual(name3, "Sheet3")

    def test_autogenerated_sheet_name_with_deletion(self):
        """Integration test for sheet names autogenerations when sheets
        are created and deleted."""

        wb = Workbook()
        _, name = wb.new_sheet()
        _, name2 = wb.new_sheet()
        _, _ = wb.new_sheet()

        wb.del_sheet(name2)
        _, name4 = wb.new_sheet()

        self.assertEqual(name4, "Sheet2")

        wb.del_sheet(name)
        _, name5 = wb.new_sheet()

        self.assertEqual(name5, "Sheet1")

    def test_sheet_indices(self):
        """Unit test for sheet indices."""

        wb = Workbook()

        idx, _ = wb.new_sheet()
        idx2, _ = wb.new_sheet()
        idx3, _ = wb.new_sheet()

        self.assertEqual(idx, 0)
        self.assertEqual(idx2, 1)
        self.assertEqual(idx3, 2)

    def test_num_sheets(self):
        """Unit test for the number of sheets in the workbook."""

        wb = Workbook()

        wb.new_sheet()
        wb.new_sheet()
        num_sheets = wb.num_sheets()

        self.assertEqual(num_sheets, 2)

        wb.new_sheet()
        num_sheets = wb.num_sheets()

        self.assertEqual(num_sheets, 3)

    def test_sheet_name_uniqueness(self):
        """Unit test for having case-insensitive unique sheet names."""

        wb = Workbook()
        _, _ = wb.new_sheet("Sheet1")

        self.assertRaises(ValueError, wb.new_sheet, "sheet1")

        _, _ = wb.new_sheet("July Totals")

        self.assertRaises(ValueError, wb.new_sheet, "july totals")
        self.assertEqual(wb.num_sheets(), 2)

    def test_del_sheet(self):
        """Unit test for deleting sheets."""

        wb = Workbook()
        idx, name = wb.new_sheet()
        idx2, name2 = wb.new_sheet()

        self.assertRaises(KeyError, wb.del_sheet, "foo bar")
        wb.set_cell_contents(name, "a1", "=0")
        wb.set_cell_contents(name2, "a2", f"={name}!a1 + 1")
        wb.set_cell_contents(name2, "a3", f"={name}!a1 + a2")

        wb.del_sheet(name)
        a2 = wb.get_cell_value(name2, "a2")
        a3 = wb.get_cell_value(name2, "a3")

        self.assertRaises(KeyError, wb.get_cell_value, name, "a1")
        self.assertEqual(wb.num_sheets(), 1)
        self.assertEqual(wb.list_sheets(), [name2])
        self.assertRaises(KeyError, wb.del_sheet, name)
        self.assertTrue(isinstance(a2, CellError))
        self.assertTrue(isinstance(a3, CellError))
        self.assertEqual(a2.get_type(), CellErrorType.BAD_REFERENCE)
        self.assertEqual(a3.get_type(), CellErrorType.BAD_REFERENCE)

    def test_sheet_indices_shift(self):
        """Integration test for shifting sheet indices caused by deleting
        sheets.
        """

        wb = Workbook()
        _, name = wb.new_sheet()
        _, name2 = wb.new_sheet()
        _, name3 = wb.new_sheet()
        _, name4 = wb.new_sheet()

        self.assertEqual(wb.sheet_name_to_idx.get(name4), 3)

        wb.del_sheet(name2)

        self.assertEqual(wb.sheet_name_to_idx.get(name4), 2)
        self.assertEqual(
            [wb.sheet_name_to_idx.get(x) for x in wb.list_sheets()], [0, 1, 2])

        wb.del_sheet(name)

        self.assertEqual(
            [wb.sheet_name_to_idx.get(x) for x in wb.list_sheets()], [0, 1])

    def test_sheet_name_rules(self):
        """Unit test for sheet naming restrictions excluding uniqueness."""

        wb = Workbook()
        wb.new_sheet("foo           bar")
        wb.new_sheet("#hel.lo _world.?!,:;!@$%^&*()-")
        wb.new_sheet("3")

        self.assertEqual(wb.num_sheets(), 3)
        with self.assertRaises(ValueError):
            wb.new_sheet("foo'bar")
            wb.new_sheet("\"foobar\"")
            wb.new_sheet(" foobar")
            wb.new_sheet("foobar ")
            wb.new_sheet("")
            wb.new_sheet(" ")
            wb.new_sheet("\n")

    def test_valid_cell_locations(self):
        """Unit test for size limitations of a spreadsheet and valid /
        invalid cell locations."""

        wb = Workbook()
        _, name = wb.new_sheet()

        wb.set_cell_contents(name, "ABC123", "foo bar")
        wb.set_cell_contents(name, "ZZZZ9999", "9999")

        self.assertEqual(wb.get_cell_contents(name, "ABC123"), "foo bar")
        self.assertEqual(wb.get_cell_contents(name, "ZZZZ9999"), "9999")
        with self.assertRaises(ValueError):
            wb.set_cell_contents(name, "", None)
            wb.set_cell_contents(name, "A", "2")
            wb.set_cell_contents(name, "12", "")
            wb.set_cell_contents(name, "1A", "1")
            wb.set_cell_contents(name, "FU", "1")
            wb.set_cell_contents(name, "SHEET1", "6")
            wb.set_cell_contents(name, "A10000", "7")

    def test_sheet_extent(self):
        """Unit test for extent calculations of spreadsheets."""

        wb = Workbook()
        idx, name = wb.new_sheet()

        extent = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "A1", "1")
        extent2 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "D14", "green")
        extent3 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "B14", "blue")
        extent4 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "A25", "cheese")
        extent5 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "A25", None)
        extent6 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "D14", "")
        extent7 = wb.get_sheet_extent(name)
        wb.set_cell_contents(name, "B14", "  ")
        extent8 = wb.get_sheet_extent(name)

        self.assertEqual(extent, (0, 0))
        self.assertEqual(extent2, (1, 1))
        self.assertEqual(extent3, (4, 14))
        self.assertEqual(extent4, (4, 14))
        self.assertEqual(extent5, (4, 25))
        self.assertEqual(extent6, (4, 14))
        self.assertEqual(extent7, (2, 14))
        self.assertEqual(extent8, (1, 1))


if __name__ == "__main__":
    unittest.main()
